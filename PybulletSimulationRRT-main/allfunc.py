import numpy as np
import open3d as o3d
def axis():
  # o3d.visualization.draw_geometries([pcd], window_name="Point Cloud Visualization")
    axis_length = 1.1  # Length of the axes
    axis = o3d.geometry.LineSet()

    # Define the points for axes
    points = np.array([[0, 0, 0],      # Origin
                       [axis_length, 0, 0],  # X-axis
                       [0, axis_length, 0],  # Y-axis
                       [0, 0, axis_length]]) # Z-axis

    # Define lines connecting the points
    lines = np.array([[0, 1],  # X-axis
                      [0, 2],  # Y-axis
                      [0, 3]]) # Z-axis

    axis.points = o3d.utility.Vector3dVector(points)
    axis.lines = o3d.utility.Vector2iVector(lines)

    # Set colors for axes
    colors = np.array([[1, 0, 0],  # Red for X-axis
                       [0, 1, 0],  # Green for Y-axis
                       [0, 0, 1]]) # Blue for Z-axis
    axis.colors = o3d.utility.Vector3dVector(colors)

    # Visualize the point cloud and axes
    return axis

# def ball(point1):
#     sphere_radius = 0.04
#     sphere = o3d.geometry.TriangleMesh.create_sphere(radius=sphere_radius)
#     # Translate the sphere slightly along the Z-axis (optional adjustment)
#     sphere.translate(point1)

#     sphere_color = (1,0,0)

#     sphere.paint_uniform_color(sphere_color)

#     sphere
  
#Camera frame

#pricle
grasp3_set1 = np.array([ #multiplied z row with -1
    [-0.4132756, 0.18805644, 0.8909759, 0.0992611],
    [-0.90863097, -0.14957029, -0.38989538, -0.1542366],
    [-1 *0.05994118,-1* -0.9707025,-1* 0.23268768,-1* 0.5472479],
    [0.0, 0.0, 0.0, 1.0]
])

#box
grasp3_set2 = np.array([
        [-9.95550632e-01,  8.35102126e-02,  4.36469279e-02,
            -2.59788670e-02],
        [-7.36113489e-02, -4.00091887e-01, -9.13514018e-01,
          1.05888382e-01],
        [-5.88249750e-02, -9.12662387e-01,  4.04459000e-01,
          7.41479397e-01],
        [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
          1.00000000e+00]
          ])
# # Multiply the third row by -1
grasp3_set2[2] *= -1

#mustard
grasp3_set3 = np.array([
    [0.99453133,  0.02006205, -0.10249349,  0.16537172],
    [-0.03278817, 0.9917361,  -0.12403324,  0.01322206],
    [0.09915815,  0.12671551,  0.9869705,   0.55446446],
    [0.0,         0.0,         0.0,         1.0]
])
# Multiply the third row by -1
grasp3_set3[2] *= -1



#####Top 7 Grasp 
grasp1_7 = np.array([
    [[-0.53390694,  0.16636148,  0.8290158 ,  0.10879563],
     [-0.843947  , -0.16506547, -0.5103987 , -0.1428654 ],
     [ 0.05193119, -0.9721508 ,  0.22852987,  0.5576946 ],
     [ 0.        ,  0.        ,  0.        ,  1.        ]],

    [[-0.3251164 ,  0.20363548,  0.923489  ,  0.09873354],
     [-0.94389266, -0.12978558, -0.3036811 , -0.16436218],
     [ 0.05801531, -0.9704062 ,  0.2344055 ,  0.5617278 ],
     [ 0.        ,  0.        ,  0.        ,  1.        ]],

    [[-0.18203416,  0.23801939,  0.9540494 ,  0.09216613],
     [-0.98297346, -0.06875165, -0.17040057, -0.17923333],
     [ 0.02503384, -0.96882397,  0.24648191,  0.5473873 ],
     [ 0.        ,  0.        ,  0.        ,  1.        ]],

    [[-0.3319563 ,  0.16853872,  0.9281162 ,  0.09580658],
     [-0.9403331 , -0.13703166, -0.31144193, -0.16302547],
     [ 0.07469129, -0.9761235 ,  0.20397103,  0.54974645],
     [ 0.        ,  0.        ,  0.        ,  1.        ]],

    [[-0.33916   ,  0.19608551,  0.92006564,  0.09951303],
     [-0.93896276, -0.13046084, -0.3183219 , -0.16331099],
     [ 0.05761424, -0.9718694 ,  0.2283641 ,  0.55726725],
     [ 0.        ,  0.        ,  0.        ,  1.        ]],

    [[-0.38216236,  0.1647873 ,  0.9092839 ,  0.0996389 ],
     [-0.92102224, -0.14809984, -0.36025617, -0.15844795],
     [ 0.07529914, -0.975147  ,  0.20837097,  0.55518574],
     [ 0.        ,  0.        ,  0.        ,  1.        ]],

    [[-0.28015676,  0.18722045,  0.9415204 ,  0.09401152],
     [-0.95821434, -0.11356566, -0.2625417 , -0.16893892],
     [ 0.05777121, -0.9757312 ,  0.2112135 ,  0.5589594 ],
     [ 0.        ,  0.        ,  0.        ,  1.        ]]
])

# Make the third row of each matrix in grasp1_7 negative
grasp1_7[:, 2, :] *= -1



grasp2_7 = np.array([
    [[-9.9527884e-01,  7.5814098e-02,  6.0597755e-02,  7.9152137e-03],
     [-3.2497142e-02, -8.4863216e-01,  5.2798420e-01, -1.9780980e-01],
     [ 9.1453709e-02,  5.2352220e-01,  8.4708953e-01,  4.4866809e-01],
     [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  1.0000000e+00]],

    [[ 9.9515349e-01, -9.5610619e-02,  2.2983160e-02,  1.6602904e-02],
     [ 9.8011293e-02,  9.4548750e-01, -3.1055951e-01, -9.3688466e-02],
     [ 7.9625351e-03,  3.1130698e-01,  9.5027602e-01,  4.5559207e-01],
     [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  1.0000000e+00]],

    [[ 9.9930638e-01, -3.6851160e-02,  5.3588729e-03,  1.8581731e-02],
     [ 3.7238646e-02,  9.8926556e-01, -1.4130391e-01, -1.3902485e-01],
     [-9.4138151e-05,  1.4140546e-01,  9.8995173e-01,  4.3813255e-01],
     [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  1.0000000e+00]],

    [[ 9.9676663e-01, -8.0229633e-02, -4.4104778e-03,  1.9473720e-02],
     [ 6.9638073e-02,  8.8995439e-01, -4.5070139e-01, -3.4314487e-02],
     [ 4.0084727e-02,  4.4893697e-01,  8.9266390e-01,  4.6163464e-01],
     [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  1.0000000e+00]],

    [[ 9.9711680e-01,  2.3302002e-02, -7.2214335e-02,  2.6787136e-02],
     [-1.3529059e-02,  9.9102670e-01,  1.3297722e-01, -1.6035736e-01],
     [ 7.4664913e-02, -1.3161683e-01,  9.8848480e-01,  4.3366405e-01],
     [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  1.0000000e+00]],

    [[ 9.9280703e-01,  3.6954630e-02, -1.1387942e-01,  3.0988332e-02],
     [-3.6104985e-02,  9.9930263e-01,  9.5151644e-03, -1.3863240e-01],
     [ 1.1415166e-01, -5.3351079e-03,  9.9344897e-01,  4.3679288e-01],
     [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  1.0000000e+00]],

    [[ 9.9631661e-01, -8.0656558e-02,  2.9114248e-02,  1.6049819e-02],
     [ 8.0964603e-02,  9.9667108e-01, -9.5595662e-03, -1.4583205e-01],
     [-2.8246330e-02,  1.1881578e-02,  9.9953038e-01,  4.3858930e-01],
     [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  1.0000000e+00]]
])
grasp2_7[:, 2, :] *= -1


grasp3_7 = np.array([
    [[ 0.9762698,  -0.10524881, -0.18926181,  0.17448767],
     [ 0.10552344,  0.9943791,  -0.00865406, -0.02176016],
     [ 0.18910885, -0.01152286,  0.9818885,   0.55392134],
     [ 0.,          0.,          0.,          1.        ]],

    [[ 0.9730176,  -0.16707179, -0.15913506,  0.1740156 ],
     [ 0.163401,    0.9859037,  -0.03597369, -0.0250765 ],
     [ 0.16290201,  0.00900021,  0.9866012,   0.5553929 ],
     [ 0.,          0.,          0.,          1.        ]],

    [[ 0.9882593,  -0.04464552, -0.14611737,  0.16971475],
     [ 0.04357567,  0.99899477, -0.01051602, -0.01878957],
     [ 0.14643998,  0.00402539,  0.9892114,   0.5522276 ],
     [ 0.,          0.,          0.,          1.        ]],

    [[ 0.99223274, -0.11506076, -0.0472775,   0.16000476],
     [ 0.0872966,   0.91482365, -0.3943056,   0.07257733],
     [ 0.08861964,  0.38711575,  0.91776246,  0.5612043 ],
     [ 0.,          0.,          0.,          1.        ]],

    [[ 0.9942762,  -0.09125829, -0.0555572,   0.15994522],
     [ 0.05991258,  0.9067982,  -0.41728568,  0.07879999],
     [ 0.08845994,  0.41156867,  0.90707546,  0.5623402 ],
     [ 0.,          0.,          0.,          1.        ]],

    [[ 0.9987558,  -0.04980598,  0.00247914,  0.1547182 ],
     [ 0.04418366,  0.86077183, -0.5070696,   0.08316254],
     [ 0.02312112,  0.5065482,   0.8619015,   0.5697232 ],
     [ 0.,          0.,          0.,          1.        ]],

    [[ 0.9976503,  -0.0682025,   0.00649203,  0.15614259],
     [ 0.06291258,  0.8744903,  -0.48094544,  0.0754761 ],
     [ 0.02712445,  0.4802238,   0.87672645,  0.5664705 ],
     [ 0.,          0.,          0.,          1.        ]]
])
grasp3_7[:, 2, :] *= -1

def rotation_matrix_to_quaternions(matrix):
    # Ensure the matrix is in the correct 3x3 shape
    assert matrix.shape == (3, 3)

    # Calculate the quaternion from the rotation matrix
    m = matrix
    trace = np.trace(m)
    
    if trace > 0:
        s = 0.5 / np.sqrt(trace + 1.0)
        w = 0.25 / s
        x = (m[2, 1] - m[1, 2]) * s
        y = (m[0, 2] - m[2, 0]) * s
        z = (m[1, 0] - m[0, 1]) * s
    elif m[0, 0] > m[1, 1] and m[0, 0] > m[2, 2]:
        s = 2.0 * np.sqrt(1.0 + m[0, 0] - m[1, 1] - m[2, 2])
        w = (m[2, 1] - m[1, 2]) / s
        x = 0.25 * s
        y = (m[0, 1] + m[1, 0]) / s
        z = (m[0, 2] + m[2, 0]) / s
    elif m[1, 1] > m[2, 2]:
        s = 2.0 * np.sqrt(1.0 + m[1, 1] - m[0, 0] - m[2, 2])
        w = (m[0, 2] - m[2, 0]) / s
        x = (m[0, 1] + m[1, 0]) / s
        y = 0.25 * s
        z = (m[1, 2] + m[2, 1]) / s
    else:
        s = 2.0 * np.sqrt(1.0 + m[2, 2] - m[0, 0] - m[1, 1])
        w = (m[1, 0] - m[0, 1]) / s
        x = (m[0, 2] + m[2, 0]) / s
        y = (m[1, 2] + m[2, 1]) / s
        z = 0.25 * s

    return np.array([x, y, z,w])

